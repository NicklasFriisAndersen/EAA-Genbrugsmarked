@inherits LayoutComponentBase
@using Core.Models
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localstore
@using MongoDB.Bson.Serialization
@using System.Text.Json

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Genbrugsmarked</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="listing">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Listings
            </NavLink>
        </div>

        @if (user != null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="orders">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> My Orders
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="profile">
                    <span class="oi oi-person" aria-hidden="true"></span> My profile
                </NavLink>
            </div>
        }

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}

@code
{
    private User? user;

    protected override async Task OnInitializedAsync()
    {
        var userInfoJson = await localstore.GetItemAsStringAsync("userinfo");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            try
            {
                user = JsonSerializer.Deserialize<User>(userInfoJson);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deserializing user info: {ex.Message}");
            }
        }
    }

    public async void ClearLocalStorage()
    {
        await localstore.RemoveItemAsync("userinfo");
        user = null;
        StateHasChanged();
    }
}