@page "/profile"
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject HttpClient Http
@using Core.Models
@using System.Text.Json

<PageTitle>Profile</PageTitle>

<h1>My Profile</h1>
@if (user != null)
{
    <p id="name-of-user">Username: @user.Username</p>
    <p id="email-of-user">Email: @user.Email</p>
    if (user.Role == "Admin")
    {
        <p id="role-display-if-admin">Special Role: @user.Role</p>
    }
}
else
{
    <p>Please log in to view your profile.</p>
}

<table class="table table-striped">
    <thead>
    <tr>
        <th>Name</th>
        <th>Price</th>
        <th>Description</th>
        <th>Edit</th>
        <th>Delete</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in listingList ?? new Listing[0])
    {
        <tr>
            <td>@item.Title</td>
            <td>@item.Price</td>
            <td>@item.Description</td>
            <td><button @onclick="() => EditItem(item)">Edit</button></td>
            <td><button @onclick="() => DeleteListing(item)">Delete</button></td>
        </tr>
    }
    </tbody>
</table>

<ModalDialog @ref="@UpdateDialog" Title="Update listing">

    <EditForm Model="currentListing" class="row p-3" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-12 mb-3">
            <label for="Title">Title</label>
            <InputText id="Title" @bind-Value="currentListing.Title" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="currentListing.Price" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Status">Status</label>
            <InputSelect id="Status" @bind-Value="currentListing.Status" class="form-control">
                <option value="Available">Available</option>
                <option value="Unavailable">Unavailable</option>
                <option value="Sold">Sold</option>
            </InputSelect>
        </div>
        <div class="col-md-12 mb-3">
            <label for="Description">Description</label>
            <InputText id="Description" @bind-Value="currentListing.Description" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Category">Category</label>
            <InputSelect id="Category" @bind-Value="currentListing.Category" class="form-control">
                <option value="Elektronik">Elektronik</option>
                <option value="Clothing">Tøj</option>
                <option value="Books">Bøger</option>
            </InputSelect>
        </div>
        <div class="col-md-6 mb-3">
            <label for="Location">Location</label>
            <InputSelect id="Location" @bind-Value="_selectedLocationIndex" class="form-control">
                @foreach (var location in _locations)
                {
                    <option value="@_locations.IndexOf(location)">@location.Name</option>
                }
            </InputSelect>
        </div>


        <div class="col-12 mb-3">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button class="btn btn-secondary" @onclick="() => UpdateDialog.Close()">Cancel</button>
        </div>


    </EditForm>

</ModalDialog>

@code {
    private User? user;
    private Listing[]? listingList = new Listing[0];
    private string serverUrl = "https://localhost:7231";
    
    private ModalDialog? UpdateDialog { get; set; }

    private Listing? currentListing = new Listing();
    
    private int _selectedLocationIndex;

    private List<Location> _locations = new();
    
  //  private EditContext? aEditContext;
    protected override async Task OnInitializedAsync()
    {
        _locations = await Http.GetFromJsonAsync<List<Location>>($"{serverUrl}/api/location/getAllLocations");

        var userInfoJson = await localStore.GetItemAsStringAsync("userinfo");
        if (!string.IsNullOrEmpty(userInfoJson))
        {
            user = JsonSerializer.Deserialize<User>(userInfoJson);
        }

        if (user.Role == "Admin")
        {
            listingList = await Http.GetFromJsonAsync<Listing[]>($"{serverUrl}/api/listing/getall");
        }
        else
        {
            await FilterByUserId();
        }
    }

    private async Task FilterByUserId()
    {
        var url = $"{serverUrl}/api/listing/getbyuserid?userId={user.Id}";
        listingList = await Http.GetFromJsonAsync<Listing[]>(url);
        StateHasChanged();
    }

    private async Task EditItem(Listing item)
    {
        currentListing = item;
        _selectedLocationIndex = _locations.IndexOf(currentListing.Location);
       // aEditContext = new EditContext(currentListing);
        UpdateDialog.Open();
    }

    private async Task DeleteListing(Listing listing)
    {
        await Http.DeleteAsync($"{serverUrl}/api/listing/deletebyid?listingId={listing.Id}");
        StateHasChanged();
        await FilterByUserId();
    }

    public async Task HandleValidSubmit()
    {
        currentListing.Location = _locations[_selectedLocationIndex];
        await Http.PostAsJsonAsync($"{serverUrl}/api/listing/update", currentListing);
        UpdateDialog.Close();
        await FilterByUserId();
    }
    
    

}